using BinaryBuilder

# Collection of sources required to build LLVM
sources = [
    "patches"
]


# Bash recipe for building across all platforms
script = raw"""
cd /workspace/destdir
rm bin/* || true
cp tools/llc* bin
cp tools/lld* bin
cp tools/LLVM.dll bin || true
mkdir newlib
cp -av lib/libLLVM*.so newlib || true
cp -av lib/libLLVM*.dylib newlib || true
rm -r lib
rm -r tools
rm -r include
rm -r share
rm -r libexec
rm -r logs
mv newlib lib
# empty out the manifests
> manifests/LLVM.${target}.list   

"""

# These are the platforms we will build for by default, unless further
# platforms are passed in on the command line.
platforms = [
    Windows(:x86_64),
    Linux(:x86_64, :glibc),
    MacOS(),
    Windows(:i686),
    Linux(:i686, :glibc),
    Linux(:aarch64, :glibc),
    Linux(:armv7l, :glibc),
    # ppc64le isn't working right now....
    #Linux(:powerpc64le, :glibc),
]

# The products that we will ensure are always built
products(prefix) = [
    LibraryProduct(prefix, ["libLLVM"], :libLLVM),
    ExecutableProduct(prefix, "llc", :llc),
    ExecutableProduct(prefix, "lld", :lld),
]

# Dependencies that must be installed before this package can be built
dependencies = [
    # "https://github.com/staticfloat/LLVMBuilder/releases/download/v6.0.0-3/build.jl"
    BinaryBuilder.InlineBuildDependency(raw"""
using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libLLVM"], :libLLVM),
    LibraryProduct(prefix, String["libLTO"], :libLTO),
    LibraryProduct(prefix, String["libclang"], :libclang),
    ExecutableProduct(prefix, "llvm-config", :llvm_config),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/staticfloat/LLVMBuilder/releases/download/v6.0.0-3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/LLVM.aarch64-linux-gnu.tar.gz", "2f04a47e0b3b8205df963886aeebcfd1d1b7c985f9332a267f66af40339c1f35"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/LLVM.arm-linux-gnueabihf.tar.gz", "a18f0d2c633995fcc68aeecb9a405f9f40293c812556057a1b8125063eea303c"),
    Linux(:i686, :glibc) => ("$bin_prefix/LLVM.i686-linux-gnu.tar.gz", "14f5dff6d707c4a2b71252d00e01a88723f0d14a89c971a7857f005e678b1507"),
    Windows(:i686) => ("$bin_prefix/LLVM.i686-w64-mingw32.tar.gz", "e106a2211236083d6d8aa7be378832f33c9c00dc857db26aad083b97d5272cec"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/LLVM.powerpc64le-linux-gnu.tar.gz", "63c8456c20f8cfd9d9ff0b2ea75ee7bb97c87929415a2d7d94d90c710fdc3c2e"),
    MacOS(:x86_64) => ("$bin_prefix/LLVM.x86_64-apple-darwin14.tar.gz", "3fd47e1d52416f930667e98bdddf93e46ec242326c87887fa295a7981d692e25"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/LLVM.x86_64-linux-gnu.tar.gz", "10428267da56b92089e212badf67ccf4c64097904344f3c68024383e65615398"),
    Windows(:x86_64) => ("$bin_prefix/LLVM.x86_64-w64-mingw32.tar.gz", "1241e6862b9c2797263d5337522c9937e0fcc67d63bfe0a1d108e9106e4cc29c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
""")
]

# Build the tarballs, and possibly a `build.jl` as well.
build_tarballs(ARGS, "lld", sources, script, platforms, products, dependencies)
